rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuth() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users can read any profile (for directory), but only update their own. Admins can do anything.
    match /users/{userId} {
      allow read: if isAuth();
      allow write: if isAuth() && (request.auth.uid == userId || isAdmin());
    }

    // Employees can create their own logs. Admins can read any log. Employees can read their own.
    match /dailyLogs/{logId} {
      allow create: if isAuth();
      allow read: if isAuth() && (isAdmin() || request.auth.uid == resource.data.employeeId);
    }

    // Employees can create their own visitor logs. Admins can read any log.
    match /visitorLogs/{logId} {
      allow create: if isAuth();
      allow read: if isAuth() && isAdmin();
    }

    // Admins can create tasks. Employees can read/update their own tasks.
    match /tasks/{taskId} {
      allow read: if isAuth();
      allow create: if isAdmin();
      allow update: if isAuth();
    }

    // Admins can create/delete resources. All authenticated users can read them.
    match /resources/{resourceId} {
      allow read: if isAuth();
      allow write, delete: if isAdmin();
    }
    
    // Admins can write announcements. All authenticated users can read them.
    match /announcements/{announcementId} {
        allow read: if isAuth();
        allow write: if isAdmin();
    }

    // Admins can manage fake employees. All authenticated users can read them.
    match /fakeEmployees/{employeeId} {
        allow read: if isAuth();
        allow write, delete: if isAdmin();
    }
  }
}