rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is an employee
    function isEmployee() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'employee';
    }
    
    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read all user data. Employees can only read their own.
      allow read: if isSignedIn();
      
      // Admins can create new users.
      // An authenticated user can update their own name.
      allow write: if isAdmin() || (isEmployee() && isOwner(userId));
    }

    // Rules for 'dailyLogs' collection
    match /dailyLogs/{logId} {
      // Admins can read all logs. Employees can only read their own logs.
      allow read: if isAdmin() || (isEmployee() && resource.data.employeeId == request.auth.uid);
      // Employees can create their own logs. Admins cannot create logs for others.
      allow create: if isEmployee() && request.resource.data.employeeId == request.auth.uid;
      // No one can update or delete logs to preserve data integrity.
      allow update, delete: if false;
    }

    // Rules for 'tasks' collection
    match /tasks/{taskId} {
      // Admins can read all tasks. Employees can only read their own.
      allow read: if isAdmin() || (isEmployee() && resource.data.employeeId == request.auth.uid);
      // Admins can create tasks.
      allow create: if isAdmin();
      // Admins can update any task. Employees can only update their own tasks.
      allow update: if isAdmin() || (isEmployee() && resource.data.employeeId == request.auth.uid);
      // Admins can delete tasks.
      allow delete: if isAdmin();
    }
    
    // Rules for 'resources' collection
    match /resources/{resourceId} {
        // Any signed-in user can read resources.
        allow read: if isSignedIn();
        // Only admins can create, update, or delete resources.
        allow write: if isAdmin();
    }
    
    // Rules for 'announcements' collection
    match /announcements/{announcementId} {
        // Any signed-in user can read announcements.
        allow read: if isSignedIn();
        // Only admins can write announcements.
        allow write: if isAdmin();
    }
    
    // Rules for 'visitorLogs' collection
    match /visitorLogs/{logId} {
        // Only admins can read visitor logs for security.
        allow read: if isAdmin();
        // Any authenticated employee can create a log for themselves.
        allow create: if isEmployee() && request.resource.data.employeeId == request.auth.uid;
        // Logs are immutable.
        allow update, delete: if false;
    }
    
    // Rules for 'fakeEmployees' collection
    match /fakeEmployees/{employeeId} {
        // Any signed-in user can view the fake employee directory.
        allow read: if isSignedIn();
        // Only admins can manage the fake employee list.
        allow write: if isAdmin();
    }

    // Rules for 'config' collection (e.g., webhook URL)
    match /config/{configId} {
        // All signed-in users can read config (needed for webhook URL on client).
        allow read: if isSignedIn();
        // Only admins can write to config.
        allow write: if isAdmin();
    }

    // Rules for 'taskFields' collection (dynamic form fields)
    match /taskFields/{fieldId} {
        // All signed-in users need to read these to build the form.
        allow read: if isSignedIn();
        // Only admins can create, update, or delete the form fields.
        allow write: if isAdmin();
    }
  }
}
